{"version":3,"file":"static/webpack/static/development/pages/reaction-commerce-support-plans.js.564d5eb8501855fbacfe.hot-update.js","sources":["webpack:///./pages/reaction-commerce-support-plans.js"],"sourcesContent":["import React, { Component } from \"react\"\nimport { SegmentedControl } from \"segmented-control\"\nimport styled from \"styled-components\"\nimport { Stitch, AnonymousCredential } from \"mongodb-stitch-browser-sdk\"\nimport {\n  Button,\n  ButtonWrapper,\n  Footer,\n  Head,\n  Nav,\n  Paragraph,\n  ServicePageHeader as Header,\n  Title,\n  Wire\n} from \"../components\"\nimport media from \"../styles/mediaQueries\"\nimport { green, black, white } from \"../styles/colors\"\n\nconst PageWrapper = styled.div`\n  padding: 1.2rem;\n  ${media.smallTablet`padding: 3rem;`}\n`\n\nconst Form = styled.form`\n  margin-top: 2rem;\n  \n  ${media.tablet`margin-left: 28rem;`}\n  ${media.laptop`margin-right: 8rem;`}\n`\n\nconst FieldWrapper = styled.div`\n  margin-bottom: .8rem;\n  width: 100%;\n  padding-right: 1rem;\n`\n\nconst Slider = styled.input`\n  display: block;\n  width: 100%;\n  margin: 1.5rem 0;\n  -webkit-appearance: none;\n  \n  &::-moz-range-thumb {\n    background: rgb(${green});\n    box-shadow: none;\n    border: none;\n    width: 1rem;\n    height: 1rem;\n    border-radius: 1rem;\n  }\n  \n  &::-webkit-slider-thumb {\n    -webkit-appearance: none;\n    margin-top: -7px; // Needed by Chrome\n    background: rgb(${green});\n    box-shadow: none;\n    border: none;\n    width: 1rem;\n    height: 1rem;\n    border-radius: 1rem;\n  }\n  \n  &::-moz-range-track {\n    background: rgb(${green});\n  }\n  \n  &::-webkit-slider-runnable-track {\n    height: 2px;\n    background: rgb(${green});\n  }\n  \n  &:focus {\n    outline-color: rgb(${green});\n  }\n`\n\nconst Price = styled.span`\n  font-size: 1.3rem;\n`\n\nconst PaymentSwitcher = styled.a`\n  display: block;\n  margin: 1.5rem 0;\n  color: rgb(${black});\n`\n\nconst SavingsIndicator = styled.p`\n  display: block;\n  margin-top: .5rem;\n`\n\nconst PriceBreakdown = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  \n  ${media.tablet`flex-direction: row;`}\n`\n\nconst TextInput = styled.input`\n  display: block;\n  width: 100%;\n  margin: 1rem 0;\n  height: 2.5rem;\n  padding-left: .5rem;\n  font-size: 1rem;\n`\n\nconst SideBySide = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  \n  ${media.tablet`flex-direction: row;`}\n`\n\nclass Emergency extends Component {\n  constructor() {\n    super()\n\n    this.customerDetailForm = React.createRef();\n\n    this.state = {\n      chatSupport: false,\n      responseTime: 0,\n      hours: 0,\n      advanceNotice: 72,\n      dedicatedExperts: false,\n      showPriceMonthly: true,\n      monthlyPrice: \"$0\",\n      yearlyPrice: \"$0\",\n      yearlySavings: \"$0\",\n      step: 0\n    }\n  }\n\n  componentDidMount() {\n    try {\n      const client = Stitch.defaultAppClient;\n\n      // Stitch client is already initiated if this didn't crash\n    } catch(err) {\n      // Threw error because client is not initiated\n      const stitchClient = Stitch.initializeDefaultAppClient(\"outgrow-hunql\")\n      stitchClient.auth.loginWithCredential(new AnonymousCredential())\n    }\n  }\n\n  handleUpdatePrice = () => {\n    let price = 0\n\n    const { chatSupport, dedicatedExperts } = this.state\n    const hours = parseInt(this.state.hours)\n    const advanceNotice = parseInt(this.state.advanceNotice)\n    const responseTime = parseInt(this.state.responseTime)\n\n    if (chatSupport) {\n      price += 5990\n    }\n\n    if (hours) {\n      let faceTimeTotal = 800 * hours\n\n      if (hours > 10 && hours <= 15) {\n        faceTimeTotal = faceTimeTotal * 0.95\n      }\n\n      if (hours > 15) {\n        faceTimeTotal = faceTimeTotal * 0.9\n      }\n\n      price += faceTimeTotal\n    }\n\n    if (advanceNotice === 24) {\n      price += 3000\n    }\n\n    if (advanceNotice === 5) {\n      price += 6000\n    }\n\n    if (advanceNotice === 1) {\n      price += 10000\n    }\n\n    if (chatSupport) {\n      if (responseTime === 30) {\n        price += 10000\n      }\n\n      if (responseTime === 60) {\n        price += 8000\n      }\n\n      if (responseTime === 120) {\n        price += 6000\n      }\n\n      if (responseTime === 180) {\n        price += 4000\n      }\n    }\n\n    if (dedicatedExperts && hours && hours > 0) {\n      price = price * 1.35\n    } else if (dedicatedExperts) {\n      price = price * 1.15\n    }\n\n    const currency = { style: \"currency\", currency: \"USD\", minimumFractionDigits: 0 };\n\n    this.setState({\n      monthlyPrice: parseInt(price / 12).toLocaleString(\"en-US\", currency),\n      yearlyPrice: parseInt(price * 0.9).toLocaleString(\"en-US\", currency),\n      yearlySavings: parseInt(price * 0.1).toLocaleString(\"en-US\", currency)\n    })\n  }\n\n  handleSegmentedControlChange = (fieldName, value) => {\n    this.setState({\n      [fieldName]: value\n    }, this.handleUpdatePrice)\n  }\n\n  handleInputChange = (stuff) => {\n    const { target } = stuff\n    const { name, value } = target\n\n    this.setState({\n      [name]: value\n    }, this.handleUpdatePrice)\n  }\n\n  handleSwitchPricing = (event) => {\n    event.preventDefault()\n\n    this.setState({\n      showPriceMonthly: !this.state.showPriceMonthly\n    })\n  }\n\n  handleSubmit = () => {\n    if (this.state.step === 0) {\n      this.setState({\n        step: 1\n      })\n    }\n  }\n\n  handleFormSubmit = (event) => {\n    event.preventDefault();\n    \n    Stitch.defaultAppClient.callFunction(\"sendContactRequest\", [this.state]);\n  }\n\n  render() {\n    return (\n      <div style={{ position: \"relative\" }}>\n        <Head title=\"Reaction Commerce Support Plans | Official Partner | Chat & Live Developer Help | out:grow\" />\n        <Nav />\n\n        <Header\n          backgroundImage=\"/static/emergency.jpg\"\n          body={[\n            \"Your new Reaction Commerce project is looking sharper than ever. But is your team ready to react in case an emergency happens? At out:grow, we've got the support plan you need for any situation.\",\n            \"With a support plan, our team is at your service 24/7 for your needs. Whether you prefer chat, screen-sharing calls or need a guaranteed response time — we have a solution to answer your needs.\"\n          ]}\n          buttonTextColor={green}\n          overlayColor={green}\n          title=\"We've got your back.\"\n        />\n\n        <Wire color={green} />\n\n        <PageWrapper id=\"section-content\">\n          <Title color={green}>Our Reaction Commerce support plans.</Title>\n\n          <Paragraph>Because every project is different, there is no one-size-fits-all in the world of support. Our Reaction Commerce experts are available to your team — whether you need a full-featured dedicated plan with a guaranteed response time, or a lightweight chat-only membership for non-urgent use.</Paragraph>\n\n          <Paragraph>With our support plan configurator, we're leading the way by giving our customers full power. Estimate your base pricing, choose your payment terms and sign up right from our website. Getting peace of mind for your Reaction Commerce infrastructure has never been that easy.</Paragraph>\n\n          {this.state.step === 0 &&\n            <Form>\n              <FieldWrapper>\n                <label htmlFor=\"chat-support\">Unlimited chat support (via Slack or your team's preferred tool)</label>\n                <SegmentedControl\n                  name=\"chat-support\"\n                  options={[\n                    { label: \"Yes\", value: true },\n                    { label: \"No\", value: false, default: true }\n                  ]}\n                  setValue={(value) => this.handleSegmentedControlChange(\"chatSupport\", value)}\n                  style={{ color: `rgb(${green}` }}\n                />\n              </FieldWrapper>\n\n              <FieldWrapper>\n                <label htmlFor=\"response-time\">Guaranteed chat response time</label>\n                <SegmentedControl\n                  name=\"response-time\"\n                  options={[\n                    { label: \"30 min.\", value: 30, disabled: !this.state.chatSupport },\n                    { label: \"1 hour\", value: 60, disabled: !this.state.chatSupport },\n                    { label: \"2 hours\", value: 120, disabled: !this.state.chatSupport },\n                    { label: \"3 hours\", value: 180, disabled: !this.state.chatSupport },\n                    { label: \"None\", value: 0, default: true }\n                  ]}\n                  setValue={(value) => this.handleSegmentedControlChange(\"responseTime\", value)}\n                  style={{ color: `rgb(${green}` }}\n                />\n              </FieldWrapper>\n\n              <FieldWrapper>\n                <label htmlFor=\"hours\">Yearly face-time hours: {this.state.hours}</label>\n                <Slider type=\"range\" id=\"hours\" min=\"0\" max=\"20\" step=\"1\" name=\"hours\" onChange={this.handleInputChange} value={this.state.hours}/>\n              </FieldWrapper>\n\n              <FieldWrapper>\n                <label htmlFor=\"advance-notice\">Minimum advance notice to book a face-time session</label>\n                <SegmentedControl\n                  name=\"advance-notice\"\n                  options={[\n                    { label: \"1 hour\", value: 1 },\n                    { label: \"5 hours\", value: 5 },\n                    { label: \"24 hours\", value: 24 },\n                    { label: \"72 hours\", value: 72, default: true }\n                  ]}\n                  setValue={(value) => this.handleSegmentedControlChange(\"advanceNotice\", value)}\n                  style={{ color: `rgb(${green}` }}\n                />\n              </FieldWrapper>\n\n              <FieldWrapper>\n                <label htmlFor=\"dedicated-experts\">Dedicated experts</label>\n                <SegmentedControl\n                  name=\"dedicated-experts\"\n                  options={[\n                    { label: \"Yes\", value: true },\n                    { label: \"No\", value: false, default: true }\n                  ]}\n                  setValue={(value) => this.handleSegmentedControlChange(\"dedicatedExperts\", value)}\n                  style={{ color: `rgb(${green}` }}\n                />\n              </FieldWrapper>\n\n              <PriceBreakdown>\n                <div>\n                  <p>Your total is <Price>{\n                    this.state.showPriceMonthly ?\n                      <span>{this.state.monthlyPrice} per month</span> :\n                      <span>{this.state.yearlyPrice} per year</span>\n                  }</Price>\n                  </p>\n\n                  {!this.state.showPriceMonthly && <SavingsIndicator>You are saving {this.state.yearlySavings} by paying yearly.</SavingsIndicator>}\n\n                  <PaymentSwitcher href=\"#\" onClick={this.handleSwitchPricing}>Pay {this.state.showPriceMonthly ? \"yearly and get 10% off\" : \"monthly for more flexibility\"}</PaymentSwitcher>\n                </div>\n                <div>\n                  <p>Need help? Call our 24/7 sales team at +1 (281) OUT-GROW.</p>\n                </div>\n              </PriceBreakdown>\n            </Form>\n          }\n\n          {this.state.step === 1 &&\n            <Form ref={this.customerDetailForm} onSubmit={this.handleFormSubmit}>\n              <Title color={green} noMarginLeft>Nice to meet you!</Title>\n\n              <Paragraph marginBottom noMarginLeft noMarginRight>Before going further, we need to know a little bit more about you and the company you work with. We'll reach out as soon as we can to activate your plan.</Paragraph>\n\n              <SideBySide>\n                <FieldWrapper>\n                  <label htmlFor=\"first-name\">First Name</label>\n                  <TextInput type=\"text\" id=\"first-name\" required />\n                </FieldWrapper>\n\n                <FieldWrapper>\n                  <label htmlFor=\"last-name\">Last Name</label>\n                  <TextInput type=\"text\" id=\"last-name\" required />\n                </FieldWrapper>\n              </SideBySide>\n\n              <SideBySide>\n                <FieldWrapper>\n                  <label htmlFor=\"email\">E-Mail Address</label>\n                  <TextInput type=\"email\" id=\"email\" required />\n                </FieldWrapper>\n\n                <FieldWrapper>\n                  <label htmlFor=\"phone\">Phone Number</label>\n                  <TextInput type=\"tel\" id=\"phone\" required />\n                </FieldWrapper>\n              </SideBySide>\n\n              <FieldWrapper>\n                <label htmlFor=\"company\">Company Name</label>\n                <TextInput type=\"text\" id=\"company\" required />\n              </FieldWrapper>\n\n              <FieldWrapper>\n                <label htmlFor=\"address\">Headquarters Address</label>\n                <TextInput type=\"text\" id=\"address\" required />\n              </FieldWrapper>\n\n              <SideBySide>\n                <FieldWrapper>\n                  <label htmlFor=\"city\">City</label>\n                  <TextInput type=\"text\" id=\"city\" required />\n                </FieldWrapper>\n\n                <FieldWrapper>\n                  <label htmlFor=\"zip\">ZIP Code (if applicable)</label>\n                  <TextInput type=\"text\" id=\"zip\" required />\n                </FieldWrapper>\n              </SideBySide>\n\n              <SideBySide>\n                <FieldWrapper>\n                  <label htmlFor=\"state\">State/Province (if applicable)</label>\n                  <TextInput type=\"text\" id=\"state\" required />\n                </FieldWrapper>\n\n                <FieldWrapper>\n                  <label htmlFor=\"country\">Country</label>\n                  <TextInput type=\"text\" id=\"country\" required />\n                </FieldWrapper>\n              </SideBySide>\n            </Form>\n          }\n\n          <ButtonWrapper>\n            <Button backgroundColor={green} color={white} onClick={this.handleSubmit}>Sign Up Online</Button>\n          </ButtonWrapper>\n        </PageWrapper>\n\n        <Footer color={green} />\n      </div>\n    )\n  }\n}\n\nexport default Emergency\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAWA;AACA;AAEA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAwCA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AACA;AAOA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAgCA;AADA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AArGA;AAuGA;AAGA;AACA;AA3GA;AA4GA;AAAA;AAAA;AACA;AAGA;AAGA;AACA;AApHA;AAsHA;AACA;AACA;AACA;AADA;AAGA;AACA;AA5HA;AA8HA;AACA;AACA;AADA;AAGA;AACA;AACA;AApIA;AAsIA;AAEA;AACA;AACA;AAvIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AALA;AAiBA;AACA;;;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;;;AA8GA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAIA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AApUA;AACA;AAsUA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}